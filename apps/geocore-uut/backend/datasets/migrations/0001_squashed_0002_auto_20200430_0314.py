# Generated by Django 3.0.4 on 2020-05-02 16:29

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('datasets', '0001_initial'), ('datasets', '0002_auto_20200430_0314')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DatasetQueues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, blank=True, null=True)),
                ('uploaded_date', models.DateTimeField(auto_now_add=True)),
                ('progress', models.IntegerField(default=0)),
                ('has_errors', models.BooleanField(default=False)),
                ('status', models.CharField(default='A', max_length=10)),
                ('uploaded_by', models.ForeignKey(blank=True, db_column='uploaded_by', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('sourcefile', models.FileField(blank=True, null=True, upload_to='uploads/uut/datasets')),
            ],
            options={
                'db_table': 'dataset_queues',
            },
        ),
        migrations.CreateModel(
            name='Datasets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset_queue_id', models.ForeignKey(blank=True, db_column='dataset_queue_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dataset', to='datasets.DatasetQueues')),
            ],
            options={
                'db_table': 'datasets',
            },
        ),
        migrations.CreateModel(
            name='DatasetData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_no', models.IntegerField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('dataset_id', models.ForeignKey(db_column='dataset_id', on_delete=django.db.models.deletion.CASCADE, to='datasets.Datasets')),
                ('data_pk', models.CharField(blank=True, max_length=100, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'dataset_data',
                'unique_together': {('dataset_id', 'row_no')},
            },
        ),
        migrations.CreateModel(
            name='DatasetQueueErrors',
            fields=[
                ('row_no', models.IntegerField(primary_key=True, serialize=False)),
                ('error', models.TextField()),
                ('dataset_queue_id', models.ForeignKey(db_column='dataset_queue_id', on_delete=django.db.models.deletion.CASCADE, to='datasets.DatasetQueues')),
            ],
            options={
                'db_table': 'dataset_queue_errors',
                'unique_together': {('dataset_queue_id', 'row_no')},
            },
        ),
        migrations.CreateModel(
            name='DatasetColumns',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('col_no', models.IntegerField()),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('is_geom', models.BooleanField(default=False)),
                ('is_pk', models.BooleanField(default=False)),
                ('dataset_id', models.ForeignKey(db_column='dataset_id', on_delete=django.db.models.deletion.CASCADE, to='datasets.Datasets')),
            ],
            options={
                'db_table': 'dataset_columns',
                'unique_together': {('dataset_id', 'col_no')},
            },
        ),
    ]
